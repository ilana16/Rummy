// Backend: Node.js with WebSocket (server.js)
const WebSocket = require('ws');
const http = require('http');

const server = http.createServer();
const wss = new WebSocket.Server({ server });

let games = {}; // Store game state

wss.on('connection', (ws) => {
    ws.on('message', (message) => {
        const data = JSON.parse(message);
        
        if (data.type === 'createGame') {
            const gameId = Date.now().toString();
            games[gameId] = { players: [ws], tiles: shuffleTiles(), currentTurn: 0, board: [], playerTiles: {} };
            ws.send(JSON.stringify({ type: 'gameCreated', gameId }));
        }
        
        if (data.type === 'joinGame' && games[data.gameId]) {
            games[data.gameId].players.push(ws);
            if (games[data.gameId].players.length >= 2) {
                startGame(data.gameId);
            }
        }

        if (data.type === 'playTiles' && games[data.gameId]) {
            const game = games[data.gameId];
            if (game.players[game.currentTurn] === ws) {
                game.board.push(...data.tiles);
                game.playerTiles[game.currentTurn] = game.playerTiles[game.currentTurn].filter(tile => !data.tiles.includes(tile));
                game.currentTurn = (game.currentTurn + 1) % game.players.length;
                broadcast(game, { type: 'updateBoard', board: game.board, turn: game.currentTurn, playerTiles: game.playerTiles });
            }
        }
    });
});

function shuffleTiles() {
    const tiles = [];
    const colors = ['red', 'blue', 'yellow', 'black'];
    for (let i = 1; i <= 13; i++) {
        for (let color of colors) {
            tiles.push({ number: i, color });
            tiles.push({ number: i, color });
        }
    }
    tiles.push({ number: 'Joker' }, { number: 'Joker' });
    return tiles.sort(() => Math.random() - 0.5);
}

function startGame(gameId) {
    const game = games[gameId];
    game.players.forEach((player, index) => {
        const playerTiles = game.tiles.splice(0, 14);
        game.playerTiles[index] = playerTiles;
        player.send(JSON.stringify({
            type: 'startGame',
            tiles: playerTiles,
            turn: index === 0,
            board: []
        }));
    });
}

function broadcast(game, message) {
    game.players.forEach(player => player.send(JSON.stringify(message)));
}

server.listen(8080, () => console.log('Server running on port 8080'));

// Frontend: React with WebSocket client
import { useState, useEffect } from 'react';

const socket = new WebSocket('ws://localhost:8080');

export default function RummikubGame() {
    const [tiles, setTiles] = useState([]);
    const [gameId, setGameId] = useState(null);
    const [isMyTurn, setIsMyTurn] = useState(false);
    const [board, setBoard] = useState([]);

    useEffect(() => {
        socket.onmessage = (event) => {
            const data = JSON.parse(event.data);
            if (data.type === 'gameCreated') setGameId(data.gameId);
            if (data.type === 'startGame') {
                setTiles(data.tiles);
                setIsMyTurn(data.turn);
                setBoard(data.board);
            }
            if (data.type === 'updateBoard') {
                setBoard(data.board);
                setIsMyTurn(data.turn);
                setTiles(data.playerTiles[gameId]);
            }
        };
    }, []);

    function createGame() {
        socket.send(JSON.stringify({ type: 'createGame' }));
    }

    function joinGame(gameId) {
        socket.send(JSON.stringify({ type: 'joinGame', gameId }));
    }

    function playTiles(playedTiles) {
        socket.send(JSON.stringify({ type: 'playTiles', gameId, tiles: playedTiles }));
    }

    return (
        <div>
            <button onClick={createGame}>Create Game</button>
            <input type="text" onChange={(e) => setGameId(e.target.value)} placeholder="Game ID" />
            <button onClick={() => joinGame(gameId)}>Join Game</button>
            <div>{isMyTurn ? 'Your Turn' : 'Waiting...'}</div>
            <div className="tiles">{tiles.map((tile, i) => (
                <div key={i} className={`tile ${tile.color}`}>{tile.number}</div>
            ))}</div>
            <div className="board">
                {board.map((tile, i) => (
                    <div key={i} className={`tile ${tile.color}`}>{tile.number}</div>
                ))}
            </div>
            <button onClick={() => playTiles(tiles.slice(0, 3))}>Play 3 Tiles</button>
        </div>
    );
}
